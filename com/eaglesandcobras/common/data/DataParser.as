package com.eaglesandcobras.common.data{	import flash.events.Event;	import flash.events.EventDispatcher;	import com.eaglesandcobras.common.data.*;		public class DataParser extends EventDispatcher{		private var _do:DataObject;		private var _xml:XMLLoader;		private var _amf:AMFLoader;		private var _rss:RSSLoader;		private var _data:Object;				public function DataParser($do:DataObject){			_do = $do;			determineType();		}				/*****************************		WHAT TYPE OF DATA IS LOADING		*****************************/		private function determineType():void {						switch (_do.type) {				case DataObject.XML:					_xml = new XMLLoader(_do.call);					_xml.addEventListener(Event.COMPLETE, xmlLoaded);					break;				case DataObject.AMF:					_amf = new AMFLoader(_do.call, _do.location, _do.params);					trace ("build amfLoader class");					_amf.addEventListener(Event.COMPLETE, amfLoaded);				case DataObject.RSS:					_rss = new RSSLoader(_do.call);					trace ("build rssLoader class");					_rss.addEventListener(Event.COMPLETE, rssLoaded);			}		}				/*****************************		XML		*****************************/		private function xmlLoaded(e:Event):void {			_xml.removeEventListener(Event.COMPLETE, xmlLoaded);			_data = _xml.data;						this.dispatchEvent( new Event( Event.COMPLETE ) );		}				/*****************************		AMF		*****************************/		private function amfLoaded(e:Event):void {			_amf.removeEventListener(Event.COMPLETE, amfLoaded);						this.dispatchEvent( new Event( Event.COMPLETE ) );		}				/*****************************		RSS		*****************************/		private function rssLoaded(e:Event):void {			_rss.removeEventListener(Event.COMPLETE, rssLoaded);						this.dispatchEvent( new Event( Event.COMPLETE ) );		}				/*****************************		Get DATA		*****************************/		public function get data():Object {			return _data;		}	}}