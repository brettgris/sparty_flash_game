package com.eaglesandcobras.common.types.scroller{	import com.eaglesandcobras.common.mvc.App;	import com.eaglesandcobras.common.types.scroller.*;	import com.eaglesandcobras.common.data.DataObject;	import com.eaglesandcobras.common.events.*;	import flash.display.Sprite;	import com.eaglesandcobras.common.graphics.ItemStyle;	import com.eaglesandcobras.common.graphics.ScrollStyle;	import com.eaglesandcobras.common.thumbs.ThumbItem;	import com.eaglesandcobras.common.simple.BaseButton;	import flash.events.MouseEvent;	import flash.events.Event;		public class Scroller extends App {		private var _model:ScrollerModel;		private var _view:ScrollerView;		private var _item:String;		private var _mask:Sprite;		private var _scrollStyle:ScrollStyle;		private var _nextBtn:BaseButton;		private var _previousBtn:BaseButton;				public function Scroller($itemPath:String){			super ( new ScrollerModel(), new ScrollerView() );			_item = $itemPath;			init();		}				/*****************************		Init		*****************************/		private function init():void {			_model = model as ScrollerModel;			_view = view as ScrollerView;						addMask();		}				/*****************************		Load Data		*****************************/		public function loadData($do:DataObject):void {			_model.loadData($do);			_model.addEventListener(ThumbEvent.DATA_READY, dataLoaded);		}						/*****************************		Create Items		*****************************/		private function dataLoaded(e:ThumbEvent):void {			_model.removeEventListener(ThumbEvent.DATA_READY, dataLoaded);						_model.addEventListener(ThumbEvent.ITEMS_READY, itemsReady);			_model.setPaging(scrollStyle,itemStyle);			_model.loadItems(_item, _view.itemStyle);					}				/*****************************		Add Items to View		*****************************/		private function itemsReady(e:ThumbEvent):void {			_view.removeEventListener(ThumbEvent.ITEMS_READY, itemsReady);						_view.addThumbs( _model.thumbs );			_view.arrange(_model.paging);						_view.selectItemNum(_model.selectedItemNum);		}				/*****************************		Set Size // Mask		*****************************/		private function addMask():void {			_mask = new Sprite();			_mask.graphics.beginFill(0x000000);			_mask.graphics.drawRect(0,0,_view.scrollStyle.width,_view.scrollStyle.height);			_mask.graphics.endFill();			addChild(_mask);						_view.mask = _mask;		}				private function setSize ():void {			_mask.width = _view.scrollStyle.width;			_mask.height = _view.scrollStyle.height;		}				/*****************************		Set Style		*****************************/		public function set itemStyle($itemStyle:ItemStyle):void {			_view.itemStyle = $itemStyle;		}				public function get itemStyle():ItemStyle {			return _view.itemStyle;		}				/*****************************		Set Style		*****************************/		public function set scrollStyle($style:ScrollStyle):void {			_view.scrollStyle = $style;			setSize(); 		}				public function get scrollStyle():ScrollStyle {			return _view.scrollStyle;		}				/*****************************		Get Current Item		*****************************/		public function get currentItemNum():int {			return _model.selectedItemNum;		}				public function get currentItem():ThumbItem {			return _model.selectedItem;		}				/*****************************		Get Item At		*****************************/		public function getItemAt($id:int):ThumbItem{			return _model.getItemAt($id);		}				/*****************************		Get Item Length		*****************************/		public function get totalItems():int{			return _model.totalItems;		}				/*****************************		GET PAGE		*****************************/		public function get currentPage():int{			return _model.currentPage;		}				/*****************************		Get Total Page		*****************************/		public function get totalPages():int {			return _model.totalPages;		}				/*****************************		Next Item		*****************************/		public function nextItem():void {					}				/*****************************		Previous Item		*****************************/		public function previousItem():void {					}				/*****************************		Next Page		*****************************/		public function nextPage(e:Event=null):void {			_model.nextPage();		}				/*****************************		Previous Page		*****************************/		public function previousPage():void {		}				/*****************************		Add Next Button		*****************************/		public function set nextButton($b:BaseButton):void {			if (_nextBtn) _nextBtn.removeEventListener(MouseEvent.CLICK, nextPage);			_nextBtn = $b;			_nextBtn.addEventListener(MouseEvent.CLICK, nextPage);		}				/*****************************		Add Prev Button		*****************************/		public function set previousButton($b:BaseButton):void {					}			}}