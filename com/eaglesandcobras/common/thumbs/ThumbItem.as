package com.eaglesandcobras.common.thumbs{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.display.Sprite;		import com.eaglesandcobras.common.graphics.ItemStyle;	import com.eaglesandcobras.common.events.ThumbEvent;	import com.eaglesandcobras.common.graphics.StateStyle;		public class ThumbItem extends MovieClip{		private var _params:Object;		private var _bg:Sprite;		private var _style:ItemStyle;		private var _state:String;		private var _selected:Boolean;		private var _id:int;				public static const OVER:String = "OVER";		public static const DEFAULT:String = "DEFAULT";		public static const SELECTED:String = "SELECTED";				public function ThumbItem(){			super();			init();		}				private function init():void {			addEvents();			_bg = new Sprite();			addChildAt(_bg,0)			_style = new ItemStyle();			_state = DEFAULT;			this.buttonMode = true;			this.mouseChildren = false;		}				/*****************************		Events		*****************************/		protected function addEvents():void {			this.addEventListener(MouseEvent.CLICK, itemClicked);			this.addEventListener(MouseEvent.ROLL_OVER, itemOver);			this.addEventListener(MouseEvent.ROLL_OUT, itemOut);			this.buttonMode = true;		}				private function itemClicked(e:MouseEvent):void {			if (state!=SELECTED) {				this.dispatchEvent( new ThumbEvent( ThumbEvent.ITEM_CLICK ) );			}		}				private function itemOver(e:MouseEvent):void {			if (state!=SELECTED){				state = OVER;				this.dispatchEvent( new ThumbEvent( ThumbEvent.ITEM_OVER ) );			}		}				private function itemOut(e:MouseEvent):void {			if (state!=SELECTED){				state = DEFAULT;				this.dispatchEvent( new ThumbEvent( ThumbEvent.ITEM_OUT ) );			}		}				/*****************************		Content		*****************************/		public function set content($params:Object):void {			_params = $params;			drawBG(_style.defaultStyle);			update();		}				public function get content():Object {			return _params;		}				/*****************************		update		*****************************/		public function update():void {			trace ("override update function on thumb");		}				/*****************************		Select		*****************************/		public function select():void {			state = SELECTED;			this.buttonMode = false;			drawBG(_style.selectedStyle);		}				/*****************************		Deselect		*****************************/		public function deselect():void {			state = DEFAULT;			this.buttonMode = true;			drawBG(_style.defaultStyle);		}				/*****************************		Style		*****************************/		public function set style($itemStyle:ItemStyle):void {			_style = $itemStyle;		}				public function get style():ItemStyle{			return _style;		}				/*****************************		Draw BG		*****************************/		private function drawBG($style:StateStyle):void {			_bg.graphics.clear();			if ($style.fill) {				if ($style.stroke) _bg.graphics.lineStyle($style.strokeWidth,$style.strokeColor);				_bg.graphics.beginFill($style.fillColor);				_bg.graphics.drawRect(0,0,$style.width,$style.height);				_bg.graphics.endFill();				_bg.alpha = $style.alpha;			}		}				/*****************************		STATE		*****************************/		public function set state($s:String):void {			_state = $s;						switch ($s){				case DEFAULT:					if (!_selected) drawBG(_style.defaultStyle);					break;				case OVER:					if (!_selected) drawBG(_style.overStyle);					break;				case SELECTED:					drawBG(_style.selectedStyle);					_selected = true;					break;			}		}				public function get state():String {			return _state;		}				/*****************************		ID NUM		*****************************/		public function set id($id:int):void {			_id = $id;		}				public function get id():int{			return _id;		}			}}